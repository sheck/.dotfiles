#!/usr/bin/env ruby
# frozen_string_literal: true

require 'tempfile'
require 'shellwords'

# Configuration
OLLAMA_MODEL = 'qwen2.5-coder:32b'
EDITOR = ENV['EDITOR'] || 'nvim'

def get_staged_diff
  diff = `git diff --staged`
  if diff.strip.empty?
    puts "No staged changes found."
    exit 1
  end
  diff
end

def format_commit_message(message)
  lines = message.split("\n", 2)
  return message if lines.length == 1

  subject = lines[0]
  body = lines[1].strip
  return subject if body.empty?

  # Wrap body at 72 characters using fold
  wrapped = `echo #{body.shellescape} | fold -w 72 -s`.strip

  "#{subject}\n\n#{wrapped}"
end

def generate_commit_message(diff, condense: false)
  prompt = <<~PROMPT
    Generate a git commit message for the following staged changes.

    Rules:
    - First line must be less than 50 characters total
    - If needed, add a blank line then a concise description
    - Focus on what changed, not why
    - Be direct and clear

    #{condense ? "IMPORTANT: Make this MORE CONCISE than usual.\n\n" : ""}
    Staged changes:
    #{diff}

    Provide only the commit message, no explanations or additional text.
  PROMPT

  message = `echo #{prompt.shellescape} | ollama run #{OLLAMA_MODEL}`.strip
  format_commit_message(message)
end

def show_message(message)
  IO.popen("bat -P -H 1 --style=changes,grid,numbers,snip", "w") do |bat|
    bat.puts message
  end
  puts # Add blank line for spacing
end

def edit_message(message)
  Tempfile.create(['commit_msg', '.txt']) do |file|
    file.write(message)
    file.flush
    system("#{EDITOR} #{file.path}")
    File.read(file.path)
  end
end

def commit(message)
  Tempfile.create(['commit_msg', '.txt']) do |file|
    file.write(message)
    file.flush
    system("git commit -F #{file.path}")
  end
end

# Main flow
diff = get_staged_diff
message = generate_commit_message(diff)

loop do
  show_message(message)

  choice = `gum choose --selected="Commit" "Commit" "Edit" "Condense" "Cancel"`.strip

  case choice
  when "Commit"
    commit(message)
    puts "âœ“ Committed!"
    break
  when "Edit"
    message = edit_message(message)
  when "Condense"
    puts "Generating more concise message..."
    message = generate_commit_message(diff, condense: true)
  when "Cancel", ""
    puts "Cancelled."
    exit 0
  end
end
